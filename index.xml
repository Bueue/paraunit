<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paraunit</title>
    <link>http://facile-it.github.io/paraunit/</link>
    <description>Recent content on Paraunit</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://facile-it.github.io/paraunit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Paraunit 0.7: test coverage in parallel</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.7/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.7/</guid>
      <description>

&lt;p&gt;Finally, &lt;a href=&#34;https://github.com/facile-it/paraunit/releases/tag/0.7&#34;&gt;Paraunit 0.7&lt;/a&gt; has been released!
This version includes the long awaited &lt;strong&gt;coverage feature&lt;/strong&gt;: now you can collect your test coverage running your tests
in parallel!&lt;/p&gt;

&lt;p&gt;Along with this new huge feature, here comes a lot of new fixes and changes: for example, now a lot of default PHPUnit
options can be used and they will be passed along to the single PHPUnit processes that Paraunit spawns; also, now we
&lt;strong&gt;officially support Windows&lt;/strong&gt;, and we added an &lt;a href=&#34;https://ci.appveyor.com/project/Jean85/paraunit&#34;&gt;Appveyor CI build&lt;/a&gt; to
do that.&lt;/p&gt;

&lt;p&gt;In the meantime, the &lt;a href=&#34;https://github.com/facile-it/paraunit/milestone/4&#34;&gt;1.0 milestone&lt;/a&gt; has been defined: it will drop
support to PHPUnit 4.x series, since its support is going to end by Feb. 27th, 2017; with that, also PHP &amp;lt; 5.6 will lose
support, and Paraunit will follow along. I will be able to drop a lot of BC-tricks in this way, preferring &lt;code&gt;::class&lt;/code&gt;
and array short syntax everywhere in the codebase.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full 0.7 changelog:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Paraunit is now capable of producing the test coverage of your test suites in parallel! To use it, use the new
&lt;code&gt;coverage&lt;/code&gt; command (instead of the normal &lt;code&gt;run&lt;/code&gt;), along with at least an option to specify the requested format; for
more information, please use the &lt;code&gt;--help&lt;/code&gt; option on the CLI or refer to the &lt;a href=&#34;http://engineering.facile.it/paraunit/documentation/&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s possible to choose how many concurrent processes Paraunit should spawn using the new &lt;code&gt;--parallel&lt;/code&gt; option.&lt;/li&gt;
&lt;li&gt;A lot of new options are now supported by Paraunit, and carried over to the single PHPUnit processes. The full list of
new supported options is:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude-group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test-suffix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;report-useless-tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strict-global-state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disallow-test-output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enforce-time-limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disallow-todo-tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process-isolation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-globals-backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static-backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-configuration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include-path&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;testsuite&lt;/code&gt; and &lt;code&gt;configuration&lt;/code&gt; options are still supported; thanks to @sergeyz for suggesting the feature (#56)
* Added support to Windows (thanks to R.D. for the help) and Appveyor CI build
* PHP 7.1 added to the Travis build matrix
* Log (and coverage) temp files are deleted right after being read, to reduce memory consumption (#63)&lt;/p&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Symfony 2.3 compatibility restored: the Travis build now tests with &lt;code&gt;--prefer-lowest&lt;/code&gt; under PHP 5.3; this added
&lt;code&gt;symfony/http-kernel&lt;/code&gt; to the required packages&lt;/li&gt;
&lt;li&gt;Fixed a minor typo that caused version number to be different in the command help versus the command cli &amp;ldquo;header&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.6.2</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.6.2/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.6.2/</guid>
      <description>

&lt;p&gt;Paraunit 0.6.2 has been released! This version include a fix in the choice of the dir for the partial test results, that
caused issues while on non-Linux systems. Some minor fix are present too, and now Paraunit shows the right version when
launched.&lt;/p&gt;

&lt;p&gt;Also, since this release, all commits by me will be GPG signed!&lt;/p&gt;

&lt;p&gt;Unfortunately, the coverage feature is still in the works, but it&amp;rsquo;s slowly going on; the feature is working, but release
0.7 still needs some polishing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full 0.6.2 changelog:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Binaries moved to the &lt;code&gt;/bin&lt;/code&gt; dir (#50, thanks @garak)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Temp dir for storing JSON partial logs now works in non-Linux OS too (#52, thanks @thomasvargiu): it previously used a
wrong dir (&lt;code&gt;/temp&lt;/code&gt;); now it relies on &lt;code&gt;sys_get_temp_dir()&lt;/code&gt; as a fallback&lt;/li&gt;
&lt;li&gt;Minor fixes to README.md (#48, #49, thanks @garak)&lt;/li&gt;
&lt;li&gt;Paraunit version is shown correctly now when launching it&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.6.1</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.6.1/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.6.1/</guid>
      <description>

&lt;p&gt;Paraunit 0.6.1 has been released! The main improvement on the user side is the extension of the Symfony package constraint,
to allow the full 3.x series to be used with! The coverage feature is still in the works, I hope to release 0.7 with it
this summer.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full 0.6.1 changelog:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Symfony compatibility has been extended to &lt;code&gt;&amp;lt;4.0&lt;/code&gt;, since Symfony 3.1 has been released; we will rely on &lt;a href=&#34;http://symfony.com/doc/current/contributing/code/bc.html&#34;&gt;their BC promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A new approach for dockerfiles, now they will be based on the standard Docker PHP library. This will allow for a
faster image build, cleaner dockerfiles and a more precise PHP version targeting, including:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker/dockerfile-php-5.6&lt;/code&gt; with the related &lt;code&gt;docker/setup-php-5.6.sh&lt;/code&gt; script that will allow to build a container
starting from the PHP 5.6 image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker/dockerfile-php-7&lt;/code&gt; with the related  &lt;code&gt;docker/setup-php-7.sh&lt;/code&gt; script that will allow to build a container
starting from the PHP 7.0 image&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Paraunit now adopts &lt;a href=&#34;http://www.php-fig.org/psr/psr-2/&#34;&gt;PSR-2&lt;/a&gt; as a coding style

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;contrib/contributing.sh&lt;/code&gt; has been added to tidy the code style, using &lt;code&gt;phpcbf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A git pre-commit hook is enabled during the &lt;code&gt;composer install&lt;/code&gt; command to warn about code style violations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md file has been added, with instructions for coding style and usage of Docker images for development&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.6</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.6/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.6/</guid>
      <description>

&lt;p&gt;Paraunit 0.6 has been released! In the meantime, the coverage feature is being developed on its branch, I hope to have
it working soon and release it in 0.7.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s changed in 0.6:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MASSIVE refactoring of the result output parsing (#31, #33) and the result printing (#37): now Paraunit fetches the
tests&amp;rsquo; results using PHPUnit&amp;rsquo;s &lt;code&gt;--log-json&lt;/code&gt; option (thanks to @taueres for the idea).
This grants a lot of new features:

&lt;ul&gt;
&lt;li&gt;Parsing of tests results is more robust, it should never fail!&lt;/li&gt;
&lt;li&gt;Fatal errors or segfaults are now grouped as &amp;ldquo;Abnormal termination&amp;rdquo;&lt;/li&gt;
&lt;li&gt;When a test has an abnormal termination, the culpable test function is indicated&lt;/li&gt;
&lt;li&gt;Tests with abnormal termination are printed out in full output&lt;/li&gt;
&lt;li&gt;Tests executed in a test class that has a later abnormal termination are showed and counted in results anyhow&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Added support for warnings, introduced in PHPUnit 5.1 (#30)&lt;/li&gt;
&lt;li&gt;Added support for risky outcomes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Removed &lt;code&gt;Container.php&lt;/code&gt; file and &lt;code&gt;CompilerPass&lt;/code&gt; class in favor of proper usage of Symfony&amp;rsquo;s components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paraunit&lt;/code&gt; bin now uses the container directly&lt;/li&gt;
&lt;li&gt;FinalPrinter class splitted in 3 classes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.5</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.5/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.5/</guid>
      <description>

&lt;p&gt;Paraunit 0.5 has been released! Here&amp;rsquo;s what&amp;rsquo;s changed:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SQLite is now supported in the deadlock-recognition fase (issue #26, thanks @Algatux)&lt;/li&gt;
&lt;li&gt;Travis is testing on PHP 7.0, no more nightlies or allowed failures&lt;/li&gt;
&lt;li&gt;Symfony 3.0 components are now supported and compatible with Paraunit&lt;/li&gt;
&lt;li&gt;Retry parsing and management is improved&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Removed double generation of MD5 hash of process&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.4.4</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.4.4/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.4.4/</guid>
      <description>

&lt;p&gt;Paraunit 0.4.4 has been released! Here&amp;rsquo;s what&amp;rsquo;s changed:&lt;/p&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Merged previous &lt;code&gt;v0.4&lt;/code&gt; branch, there were missing fixes in previous release&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.4.3</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.4.3/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.4.3/</guid>
      <description>

&lt;p&gt;Paraunit 0.4.3 has been released! Here&amp;rsquo;s what&amp;rsquo;s changed:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--configuration&lt;/code&gt; behaviour is now identical to the same option in PHPUnit: it can accept also a path without a filename,
and has a &lt;code&gt;-c&lt;/code&gt; shortcut (default filename is &lt;code&gt;phpunit.xml.dist&lt;/code&gt;) (&lt;a href=&#34;[https://github.com/facile-it/paraunit/issues/19]&#34;&gt;#19&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;-c&lt;/code&gt; shortcut to README&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.4.2</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.4.2/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.4.2/</guid>
      <description>

&lt;p&gt;Paraunit 0.4.2 has been released! Here&amp;rsquo;s what&amp;rsquo;s changed:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unlocked supporto for PHPUnit &amp;gt;= 5.x&lt;/li&gt;
&lt;li&gt;README changed to suggest stable version of package in &lt;code&gt;composer.json&lt;/code&gt; example&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed: test stub for fatal errors fixed for HHVM &amp;amp; PHP7&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit 0.4.1</title>
      <link>http://facile-it.github.io/paraunit/news/release/0.4.1/</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/news/release/0.4.1/</guid>
      <description>

&lt;p&gt;Paraunit 0.4.1 has been released! Here&amp;rsquo;s what&amp;rsquo;s changed:&lt;/p&gt;

&lt;h3 id=&#34;changed&#34;&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improved: &lt;code&gt;--configuration&lt;/code&gt; parameter now has the &lt;code&gt;-c&lt;/code&gt; shortcut&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fixed&#34;&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed: test with fatal errors are not mistaken (and printed twice) for unknown results in the final results&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>http://facile-it.github.io/paraunit/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://facile-it.github.io/paraunit/documentation/</guid>
      <description>

&lt;p&gt;Paraunit is a tool for faster executions of PHPUnit test suites.
It makes this possible by launching multiple test in parallel with single PHPUnit processes.&lt;/p&gt;

&lt;p&gt;Paraunit is developed using &lt;a href=&#34;http://symfony.com/components&#34;&gt;Symfony components&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;Paraunit is used in conjunction with PHPUnit. It reads PHPUnit&amp;rsquo;s .xml configuration file, so it&amp;rsquo;s needed to know which test to load.&lt;/p&gt;

&lt;p&gt;If you are testing a Symfony+Doctrine application, it&amp;rsquo;s suggested to use also &lt;a href=&#34;https://github.com/facile-it/paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/a&gt;, to avoid database concurrency problems during functional testing;
also, if your want to run functional tests, remember to &lt;strong&gt;warm up the cache before&lt;/strong&gt;, in order to avoid a mass cache miss (and relative &lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_stampede&#34;&gt;cache stampede&lt;/a&gt;) with concurrency problems, and subsequent random failures.&lt;/p&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;To use this package, use &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;from CLI: &lt;code&gt;composer require --dev facile-it/paraunit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or, directly in your &lt;code&gt;composer.json&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require-dev&amp;quot;: {
        &amp;quot;facile-it/paraunit&amp;quot;: &amp;quot;~0.7&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&#34;run-command&#34;&gt;&lt;code&gt;run&lt;/code&gt; command&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; command is the main functionality of Paraunit; it launches all the tests in all your configured testsuites in parallel; you can run it like this: (assuming your composer&amp;rsquo;s bin dir is &lt;code&gt;vendor/bin&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is possible because Paraunit starts as a Symfony console command, and it’s provided through a bin launcher.&lt;/p&gt;

&lt;h2 id=&#34;coverage-command&#34;&gt;&lt;code&gt;coverage&lt;/code&gt; command&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;coverage&lt;/code&gt; command is used to generate the test coverage in parallel. It supports all the same options of the &lt;code&gt;run&lt;/code&gt; command (documented below) but it requires &lt;strong&gt;at least one of those three options&lt;/strong&gt; to choose the coverage output format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--html=dir&lt;/code&gt; generates the coverage in HTML format, inside the specified directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--clover=filename.xml&lt;/code&gt; generates the coverage in XML-clover format, with the specified filename&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--xml=filename.xml&lt;/code&gt; generates the coverage in PHPUnit XML format, with the specified filename&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit coverage --html=./coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paraunit detects automatically if the &lt;a href=&#34;http://phpdbg.com/&#34;&gt;PHPDBG&lt;/a&gt; binary is available, at it uses that as a preferred coverage driver, since it&amp;rsquo;s a lot faster and uses less memory. If it&amp;rsquo;s not available, it falls back to use xDebug. If you have PHPDBG, you are highly encouraged to disable xDebug, since Paraunit can&amp;rsquo;t do it on its own, and using PHPDBG with xDebug enabled can lead to an excessive memory consumption, up to the point of crashing your machine.&lt;/p&gt;

&lt;h2 id=&#34;optional-parameters&#34;&gt;Optional parameters&lt;/h2&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;If your &lt;code&gt;phpunit.xml.dist&lt;/code&gt; file is not in the default base dir, you can specify it by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run --configuration=relPath/to/phpunit.xml.dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with the short version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run -c=relPath/to/phpunit.xml.dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also it&amp;rsquo;s possible to provide only a directory, in such case Paraunit will look a file with the default name, &lt;code&gt;phpunit.xml.dist&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run -c=relPath/to/xml/file/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parallel&#34;&gt;Parallel&lt;/h3&gt;

&lt;p&gt;You can choose how many concurrent processes you want to spawn at the same time, using the &lt;code&gt;--parallel&lt;/code&gt; option. The default value is &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run --parallel=5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;testsuite&#34;&gt;Testsuite&lt;/h3&gt;

&lt;p&gt;You can run a single test suite (as defined in your configuration file) using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run --testsuite=testSuiteName
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;phpunit-inherited-options&#34;&gt;PHPUnit inherited options&lt;/h3&gt;

&lt;p&gt;A large number of PHPUnit options (apart from the aforementioned &lt;code&gt;--testsuite&lt;/code&gt;) are compatible with Paraunit, and they will be passed along to each single PHPUnit spawned process. For a more complete documentation of those options&amp;rsquo; behavior, see the &lt;a href=&#34;https://phpunit.de/manual/current/en/textui.html#textui.clioptions&#34;&gt;PHPUnit CLI documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the complete list of supported options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude-group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test-suffix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;report-useless-tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strict-global-state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disallow-test-output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enforce-time-limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disallow-todo-tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process-isolation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-globals-backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static-backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-configuration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include-path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debug-mode&#34;&gt;Debug mode&lt;/h3&gt;

&lt;p&gt;If you have problem running the tests, or the execution stops before the results are printed out, you can launch Paraunit in debug mode, with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/paraunit run --debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will show a verbose output with the full running test queue.&lt;/p&gt;

&lt;h1 id=&#34;parsing-results&#34;&gt;Parsing results&lt;/h1&gt;

&lt;p&gt;Paraunit prints a parsed result from the single PHPUnit processes. This parsing is done using PHPUnit&amp;rsquo;s JSON log output, so it&amp;rsquo;s a resilient and reliable process; it allows to be also resistent to fatal errors and other abnormal process termination.&lt;/p&gt;

&lt;p&gt;Anyhow, Paraunit doesn&amp;rsquo;t rely on the parsed results to provide the final exit code; instead, it looks only to the processes&amp;rsquo; exit codes:
 &lt;strong&gt;it will return a clean zero exit code only if all the PHPUnit processes gave it a zero exit code&lt;/strong&gt;.
 So you can safely use it in your CI build ;)&lt;/p&gt;

&lt;p&gt;Side note: if you are using &lt;a href=&#34;http://symfony.com/doc/current/components/phpunit_bridge.html&#34;&gt;Symfony&amp;rsquo;s PHPUnit bridge&lt;/a&gt; to spot deprecations (or any other plugin that outputs something) you will notice that the bridge list of deprecations will be lost through Paraunit; the tests will be shown as passing, but &lt;strong&gt;the Paraunit process will still fail as expected if a deprecation is encountered&lt;/strong&gt;, due to the aforementioned exit code being considered.&lt;/p&gt;

&lt;h1 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;If you are experiencing any problems, you can try the &lt;code&gt;--debug&lt;/code&gt; option to identify the problematic test, and try running it alone; if failures seems to appear at randoms during Paraunit runs, check for concurrency problem, like database access; otherwise, please open an issue &lt;a href=&#34;https://github.com/facile-it/paraunit/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>